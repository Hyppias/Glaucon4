
//using System.ComponentModel.DataAnnotations;
//using System;
using Terwiel.Glaucon;
//using Windows.UI.ViewManagement;
using static Terwiel.Glaucon.Glaucon;
using static Terwiel.Glaucon.Glaucon.LoadCase;

namespace UnitTestGlaucon
{
    public partial class UnitTestF
    {
        public Parameters Param = new Parameters()
        {

            StrainLimit = 12.0,
            EquilibriumTolerance = 12.0,
            EquilibriumError = 12.0,
            MinEigenvalue = 12.0,
            MaxEigenvalue = 12.0,
            ModalConvergenceTol = 1e-6,
            ResidualTolerance = 1e-6,
            Analyze = true,
            Validate = true,
            ModalExaggeration = 2000.0,
            DeformationExaggeration = 500,
            XIncrement = 50.0,
            UnifLoadsLocal = true,
            // HTML = 1, Latex = 2, CSV = 3, Excel = 4, XML = 5
            OutputFormat = 2,
            RenumNodes = true,
            MaxSegmentCount = 20,
            MinimumIterations = 2,
            MaximumIterations = 13,
            AccountForShear = true,
            AccountForGeomStability = true,
            CondensationMethod = 2,
            Decimals = 2,
            ModalMethod = 1,
            Scale = 1.2,
            ConsistentMassMatrix = true,
            LumpedMassMatrix = true,
            DynamicModesCount = 15,
            PanRate = 2.0,
            Shift = 0.0,
            InputSource = 1
        };

        public Glaucon Glaucon = new()
        {

            Title = "Example E: a three dimensional structure showing lateral-torsional dynamic modes (units: kip, in)",

            Nodes = new List<Node>
            {
                new( 1, new[]{2000 ,-1500 , 0.0},150),
                new( 2, new[]{2000 ,-1200 , 0.0 }, 0),
                new( 3, new[]{2000 , 1200 , 0.0 }, 0),
                new( 4, new[]{2000 , 1500 , 0.0 },150),
                new( 5, new[]{   0, -1500, 0.0},150),
                new( 6, new[]{   0, 0, 0.0},   0),
                new( 7, new[]{   0, 1500, 0.0}, 150),
                new( 8, new[]{-2000 ,-1500 , 0.0 },150),
                new( 9, new[]{-2000 ,-1200 , 0.0 }, 0),
                new(10, new[]{-2000,  1200,    0.0 }, 0),
                new(11, new[]{-2000 , 1500 , 0.0}, 150),
                new(12, new[]{2000, -1200, -512.0}, 0),
                new(13, new[]{2000, 1200, -512.0}, 0),
                new(14, new[]{2000, -1200, -512.0}, 0),
                new(15, new[]{-2000, 1200, -512.0}, 0),
                new(16, new[]{2000 ,-1500 , 1912.0 },100),
                new(17, new[]{2000 , 1500 , 1912.0 },100),
                new(18, new[]{   0, -1500, 1912.0}, 100),
                new(19, new[]{   0, 0, 1912.0}, 0),
                new(20, new[]{   0, 1500, 1912.0}, 100),
                new(21, new[]{-2000 ,-1500 , 1912.0 },100),
                new(22, new[]{-2000 , 1500 , 1912.0 },100),
                new(23, new[]{2000 ,-1500 , 3712.0 },100),
                new(24, new[]{2000 , 1500 , 3712.0 },100),
                new(25, new[]{   0, -1500, 3712.0}, 100),
                new(26, new[]{   0, 0, 3712.0}, 0),
                new(27, new[]{   0, 1500, 3712.0}, 100),
                new(28, new[]{-2000 ,-1500 , 3712.0 },100),
                new(29, new[]{-2000 , 1500 , 3712.0 },100),
                new(30, new[]{2000 ,-1500 , 5387.0 },100),
                new(31, new[]{2000 , 1500 , 5387.0 },100),
                new(32, new[]{   0, -1500, 5387.0}, 100),
                new(33, new[]{   0, 0, 5387.0}, 0),


        },

            NodesRestraints = new List<NodeRestraint>
            {
                new(  1, new[]{1, 0, 1,0 ,0, 1}),
                new(  2, new[]{1, 0 , 0,0 ,0, 0}),
                new(  3, new[]{1, 0 , 0,0 ,0, 0}),
                new(  4, new[]{1, 0, 1,0 ,0, 1}),
                new(  5, new[]{1, 0, 1,0 ,0, 1}),
                new(  7, new[]{1, 0, 1,0 ,0, 1}),
                new(  8, new[]{1, 0, 1,0 ,0, 1}),
                new(  9, new[]{1, 0 , 0,0 ,0, 0}),
                new( 10, new[]{1, 0 , 0,0 ,0, 0}),
                new( 11, new[]{ 1, 0, 1,0 ,0, 1}),
                new( 12, new[]{1, 1 , 1,1 ,1, 1}),
                new( 13, new[]{1, 1 , 1,1 ,1, 1}),
                new( 14, new[]{1, 1 , 1,1 ,1, 1}),
                new( 15, new[]{1, 1 , 1,1 ,1, 1}),
        },
            Members = new List<Member>
            {
                new(1 , 1, 16, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(2 , 16, 23, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(3 , 23, 30, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(4 , 4, 17, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(5 , 17, 24, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(6 , 24, 31, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(7 , 5, 18, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(8 , 18, 25, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(9 , 25, 32, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(10, 7, 20, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(11, 20, 27, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(12, 27, 34, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(13, 8, 21, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(14, 21, 28, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(15, 28, 35, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(16, 11, 22, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(17, 22, 29, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(18, 29, 36, new[]{2592, 1200, 900.0},new[]{8.7160e4, 10.108e6 , 1.502e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(19, 1, 2, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(20, 2, 3, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(21, 3, 4, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(22, 5, 6, new[]{11700, 6000, 3000.0},new[]{ 76.5e9, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(23, 6, 7, new[]{11700, 6000, 3000.0},new[]{ 76.5e9, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(24, 8, 9, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(25, 9, 10, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(26, 10, 11, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(27, 1, 5, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(28, 5, 8, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(29, 4, 7, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(30, 7, 11, new[]{11700, 6000, 3000.0},new[]{ 76.5e4, 199.328e6, 67.522e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(31, 16, 17, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(32, 18, 19, new[]{3910, 2000, 1050.0},new[]{11.484e9, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(33, 19, 20, new[]{3910, 2000, 1050.0},new[]{11.484e9, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(34, 21, 22, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(35, 16, 18, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(36, 18, 21, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(37, 17, 20, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(38, 20, 22, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(39, 23, 24, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(40, 25, 26, new[]{3910, 2000, 1050.0},new[]{11.484e9, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(41, 26, 27, new[]{3910, 2000, 1050.0},new[]{11.484e9, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(42, 28, 29, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(43, 23, 25, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(44, 25, 28, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(45, 24, 27, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(46, 27, 29, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(47, 30, 31, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(48, 32, 33, new[]{3910, 2000, 1050.0},new[]{11.484e9, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(49, 33, 34, new[]{3910, 2000, 1050.0},new[]{11.484e9, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(50, 35, 36, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(51, 30, 32, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(52, 32, 35, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(53, 31, 34, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(54, 34, 36, new[]{3910, 2000, 1050.0},new[]{11.484e4, 16.006e6 , 5.629e6},new[]{200000 ,79300 , 7.85e-9},0),
                new(55, 2, 12, new[]{17671, 9000, 9000.0},new[]{4.970e7, 2.48e7  , 2.48e7},new[]{200e2  ,1.2e0 , 7.85e-9},0),
                new(56, 3, 13, new[]{17671, 9000, 9000.0},new[]{4.970e7, 2.48e7  , 2.48e7},new[]{240e2  ,1.2e0 , 7.85e-9},0),
                new(57, 9, 14, new[]{17671, 9000, 9000.0},new[]{4.970e7, 2.48e7  , 2.48e7},new[]{200e2  ,1.2e0 , 7.85e-9},0),
                new(58, 10, 15, new[]{17671, 9000, 9000.0},new[]{4.970e7, 2.48e7  , 2.48e7},new[]{200e2  ,1.2e0 , 7.85e-9},0),
              },
            LoadCases = new List<LoadCase>
            {
                new LoadCase
                {
                    g=new double[] {0,0,-9806.33},
                    NodalLoads = new List<NodalLoad>
                    {
                        new(  33,new[]{   0d,   100,      0, 0,  0,   0}),
                        new(   1,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(   4,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(   5,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(   7,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(   8,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  11,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  16,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  17,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  18,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  20,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  21,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  22,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  23,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  24,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  25,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  27,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  28,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  29,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  30,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  31,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  32,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  34,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  35,new[]{   0,     0, -9800.0, 0,  0,   0}),
                        new(  36,new[]{   0,     0, -9800.0, 0,  0,   0}),

                }
            }
        },
            ExtraNodeInertias = new List<ExtraNodeInertia>
            {
                new(6,new[]{4.0,4.75e6,3.62e6,26.53e6}),
                new(19,new[]{4.0,4.75e6,3.62e6,26.53e6}),
                new(26,new[]{4.0,4.75e6,3.62e6,26.53e6}),
                new(33,new[]{4.0,4.75e6,3.62e6,26.53e6}),

        },
            AnimatedModes = new[] { 1, 2, 5, 9, 12 },
            NodesToCondense = new List<CondensedNode>
            {
                new(  6,new[]{1,1,0,0,0,1}),
                new( 19,new[]{1,1,0,0,0,1}),
                new( 26,new[]{1,1,0,0,0,1}),
                new( 33,new[]{1,1,0,0,0,1}),

        },
            MatchedCondenseModes = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }

        };
    };
}


