#region FileHeader
// Project: Glaucon4Test
// Filename:   TestB.cs
// Last write: 5/3/2023 10:18:04 AM
// Creation:   4/24/2023 12:39:30 PM
// Copyright: E.H. Terwiel, 2021,2022, 2023, the Netherlands
// No part of this file may be copied in any form without written consent
// of the programmer, owner and/or copyrightholder.
#endregion FileHeader

using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using MathNet.Numerics.LinearAlgebra;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using dbl = MathNet.Numerics.LinearAlgebra.Double;
using gl = Terwiel.Glaucon;

namespace UnitTestGlaucon
{
    public partial class UnitTestGlaucon2
    {
        [TestMethod]
        public void TestB()
        {
            var TestObject = new TestBobject();
            var param = TestObject.Param;
            var glaucon = TestObject.Glaucon;
            var result = TestObject.Glaucon.Execute(ref deflection, ref Reactions, ref EndForces);
            foreach (var e in gl.Glaucon.Errors) //for (int i = 0; i < gl.Glaucon.Errors.Count; i++)
                Debug.WriteLine(e);
            Assert.AreEqual(0, result, $"{param.InputFileName} Exit code Glaucon");
            Assert.AreEqual(4, glaucon.Members.Count, $"{param.InputFileName} Nr of members");
            Assert.AreEqual(5, glaucon.Nodes.Count, $"{param.InputFileName} Nr of nodes");
            Assert.AreEqual(4, glaucon.NodeRestraints.Count, $"{param.InputFileName} Nr of restrained nodes");
            Assert.AreEqual(3, glaucon.LoadCases.Count, $"{param.InputFileName} Nr of load cases");

            int[,] n =
            {
                {1, 0, 0, 0, 0, 0},
                {0, 2, 2, 0, 1, 0},
                {0, 0, 0, 2, 0, 0}
            };
            for (var i = 0; i < glaucon.LoadCases.Count; i++)
            {
                var lc1 = glaucon.LoadCases[i];
                Assert.IsNotNull(lc1, $"Load case {i + 1} set to NULL");
                Assert.AreEqual(n[i, 0], lc1.NodalLoads.Count, $"{param.InputFileName} Load case {i + 1} Nr of loaded nodes");
                Assert.AreEqual(n[i, 1], lc1.UniformLoads.Count, $"{param.InputFileName} Load case {i + 1} Nr of uniform loads");
                Assert.AreEqual(n[i, 2], lc1.TrapLoads.Count, $"{param.InputFileName} Load case {i + 1} Nr of Trap loads");
                Assert.AreEqual(n[i, 3], lc1.IntPointLoads.Count, $"{param.InputFileName} Load case {i + 1} Nr of Conc. loads");
                Assert.AreEqual(n[i, 4], lc1.TempLoads.Count, $"{param.InputFileName} Load case {i + 1} Nr of temperature loads");
                Assert.AreEqual(n[i, 5], lc1.PrescrDisplacements.Count, $"{param.InputFileName} Load case {i + 1} Nr of pescr. displ");
            }

            //dbl.DenseMatrix[] ke = new dbl.DenseMatrix[4]
            //{
            //    new dbl.DenseMatrix(12)..Build.DenseOfArray(new [,]
            //    {

            //    }),
            //    new dbl.DenseMatrix(12)..Build.DenseOfArray(new [,]
            //    {

            //    }),
            //    new dbl.DenseMatrix(12)..Build.DenseOfArray(new [,]
            //    {

            //    }),
            //    new dbl.DenseMatrix(12)..Build.DenseOfArray(new [,]
            //    {

            //    }),
            //};
            //foreach(gl.Glaucon.Member member in glaucon.Members)
            //{
            //   // CheckMatrix(member.k, null, 3, 1e-13, $"{param.InputFileName} member {member.Nr} k el");
            //}

#if DEBUG
            var Ku = (dbl.DenseMatrix) Matrix<double>.Build.DenseOfArray(new[,]
            {
                {
                    7.078764713797e+03, 0, 0, 0, -4.029784492634e+02, 0, -1.769691178449e+03, -1.327117266918e+03,
                    -1.474574741020e+03, 0, -1.007446123159e+02, 9.067015108427e+01, -1.769691178449e+03,
                    1.327117266918e+03, 1.474574741020e+03, 0, -1.007446123159e+02, 9.067015108427e+01,
                    -1.769691178449e+03, -1.327117266918e+03, 1.474574741020e+03, 0, -1.007446123159e+02,
                    -9.067015108427e+01, -1.769691178449e+03, 1.327117266918e+03, 1.474574741020e+03, 0,
                    -1.007446123159e+02, 9.067015108427e+01
                },
                {
                    0, 3.982157757654e+03, 0, 4.029784492634e+02, 0, 0, -1.327117266918e+03, -9.955394394134e+02,
                    -1.105931055765e+03, 1.007446123159e+02, 0, -1.208935347790e+02, 1.327117266918e+03,
                    -9.955394394134e+02, -1.105931055765e+03, 1.007446123159e+02, 0, 1.208935347790e+02,
                    -1.327117266918e+03, -9.955394394134e+02, 1.105931055765e+03, 1.007446123159e+02, 0,
                    1.208935347790e+02, 1.327117266918e+03, -9.955394394134e+02, 1.105931055765e+03, 1.007446123159e+02,
                    0, -1.208935347790e+02
                },
                {
                    0, 0, 4.916055093633e+03, 0, 0, 0, -1.474574741020e+03, -1.105931055765e+03, -1.229013773408e+03,
                    -9.067015108427e+01, 1.208935347790e+02, 0, 1.474574741020e+03, -1.105931055765e+03,
                    -1.229013773408e+03, -9.067015108427e+01, -1.208935347790e+02, 0, 1.474574741020e+03,
                    1.105931055765e+03, -1.229013773408e+03, 9.067015108427e+01, -1.208935347790e+02, 0,
                    -1.474574741020e+03, 1.105931055765e+03, -1.229013773408e+03, 9.067015108427e+01,
                    1.208935347790e+02, 0
                },
                {
                    0, 4.029784492634e+02, 0, 5.642482948060e+05, 0, 0, 0, -1.007446123159e+02, 9.067015108427e+01,
                    4.128567459020e+04, -5.088136583587e+04, -5.653485092875e+04, 0, -1.007446123159e+02,
                    9.067015108427e+01, 4.128567459020e+04, 5.088136583587e+04, 5.653485092875e+04, 0,
                    -1.007446123159e+02, -9.067015108427e+01, 4.128567459020e+04, -5.088136583587e+04,
                    5.653485092875e+04, 0, -1.007446123159e+02, -9.067015108427e+01, 4.128567459020e+04,
                    5.088136583587e+04, -5.653485092875e+04
                },
                {
                    -4.029784492634e+02, 0, 0, 0, 6.994015308915e+05, 0, 1.007446123159e+02, 0, -1.208935347790e+02,
                    -5.088136583587e+04, 7.096647132779e+04, -4.240113819656e+04, 1.007446123159e+02, 0,
                    1.208935347790e+02, 5.088136583587e+04, 7.096647132779e+04, -4.240113819656e+04, 1.007446123159e+02,
                    0, 1.208935347790e+02, -5.088136583587e+04, 7.096647132779e+04, 4.240113819656e+04,
                    1.007446123159e+02, 0, -1.208935347790e+02, 5.088136583587e+04, 7.096647132779e+04,
                    4.240113819656e+04
                },
                {
                    0, 0, 0, 0, 0, 6.586410311197e+05, -9.067015108427e+01, 1.208935347790e+02, 0, -5.653485092875e+04,
                    -4.240113819656e+04, 6.201511993074e+04, -9.067015108427e+01, -1.208935347790e+02, 0,
                    5.653485092875e+04, -4.240113819656e+04, 6.201511993074e+04, 9.067015108427e+01,
                    -1.208935347790e+02, 0, 5.653485092875e+04, 4.240113819656e+04, 6.201511993074e+04,
                    9.067015108427e+01, 1.208935347790e+02, 0, -5.653485092875e+04, 4.240113819656e+04,
                    6.201511993074e+04
                },
                {
                    -1.769691178449e+03, -1.327117266918e+03, -1.474574741020e+03, 0, 1.007446123159e+02,
                    -9.067015108427e+01, 1.769691178449e+03, 1.327117266918e+03, 1.474574741020e+03, 0,
                    1.007446123159e+02, -9.067015108427e+01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.327117266918e+03, -9.955394394134e+02, -1.105931055765e+03, -1.007446123159e+02, 0,
                    1.208935347790e+02, 1.327117266918e+03, 9.955394394134e+02, 1.105931055765e+03, -1.007446123159e+02,
                    0, 1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.474574741020e+03, -1.105931055765e+03, -1.229013773408e+03, 9.067015108427e+01,
                    -1.208935347790e+02, 0, 1.474574741020e+03, 1.105931055765e+03, 1.229013773408e+03,
                    9.067015108427e+01, -1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    0, 1.007446123159e+02, -9.067015108427e+01, 4.128567459020e+04, -5.088136583587e+04,
                    -5.653485092875e+04, 0, -1.007446123159e+02, 9.067015108427e+01, 1.410620737015e+05,
                    -5.792281546525e+04, -6.435868385027e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.007446123159e+02, 0, 1.208935347790e+02, -5.088136583587e+04, 7.096647132779e+04,
                    -4.240113819656e+04, 1.007446123159e+02, 0, -1.208935347790e+02, -5.792281546525e+04,
                    1.748503827229e+05, -4.826901288771e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    9.067015108427e+01, -1.208935347790e+02, 0, -5.653485092875e+04, -4.240113819656e+04,
                    6.201511993074e+04, -9.067015108427e+01, 1.208935347790e+02, 0, -6.435868385027e+04,
                    -4.826901288771e+04, 1.646602577799e+05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.769691178449e+03, 1.327117266918e+03, 1.474574741020e+03, 0, 1.007446123159e+02,
                    -9.067015108427e+01, 0, 0, 0, 0, 0, 0, 1.769691178449e+03, -1.327117266918e+03, -1.474574741020e+03,
                    0, 1.007446123159e+02, -9.067015108427e+01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    1.327117266918e+03, -9.955394394134e+02, -1.105931055765e+03, -1.007446123159e+02, 0,
                    -1.208935347790e+02, 0, 0, 0, 0, 0, 0, -1.327117266918e+03, 9.955394394134e+02, 1.105931055765e+03,
                    -1.007446123159e+02, 0, -1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    1.474574741020e+03, -1.105931055765e+03, -1.229013773408e+03, 9.067015108427e+01,
                    1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, -1.474574741020e+03, 1.105931055765e+03,
                    1.229013773408e+03, 9.067015108427e+01, 1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    0, 1.007446123159e+02, -9.067015108427e+01, 4.128567459020e+04, 5.088136583587e+04,
                    5.653485092875e+04, 0, 0, 0, 0, 0, 0, 0, -1.007446123159e+02, 9.067015108427e+01,
                    1.410620737015e+05, 5.792281546525e+04, 6.435868385027e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.007446123159e+02, 0, -1.208935347790e+02, 5.088136583587e+04, 7.096647132779e+04,
                    -4.240113819656e+04, 0, 0, 0, 0, 0, 0, 1.007446123159e+02, 0, 1.208935347790e+02,
                    5.792281546525e+04, 1.748503827229e+05, -4.826901288771e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    9.067015108427e+01, 1.208935347790e+02, 0, 5.653485092875e+04, -4.240113819656e+04,
                    6.201511993074e+04, 0, 0, 0, 0, 0, 0, -9.067015108427e+01, -1.208935347790e+02, 0,
                    6.435868385027e+04, -4.826901288771e+04, 1.646602577799e+05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.769691178449e+03, -1.327117266918e+03, 1.474574741020e+03, 0, 1.007446123159e+02,
                    9.067015108427e+01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.769691178449e+03, 1.327117266918e+03,
                    -1.474574741020e+03, 0, 1.007446123159e+02, 9.067015108427e+01, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.327117266918e+03, -9.955394394134e+02, 1.105931055765e+03, -1.007446123159e+02, 0,
                    -1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.327117266918e+03, 9.955394394134e+02,
                    -1.105931055765e+03, -1.007446123159e+02, 0, -1.208935347790e+02, 0, 0, 0, 0, 0, 0
                },
                {
                    1.474574741020e+03, 1.105931055765e+03, -1.229013773408e+03, -9.067015108427e+01,
                    1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.474574741020e+03, -1.105931055765e+03,
                    1.229013773408e+03, -9.067015108427e+01, 1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0
                },
                {
                    0, 1.007446123159e+02, 9.067015108427e+01, 4.128567459020e+04, -5.088136583587e+04,
                    5.653485092875e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.007446123159e+02, -9.067015108427e+01,
                    1.410620737015e+05, -5.792281546525e+04, 6.435868385027e+04, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.007446123159e+02, 0, -1.208935347790e+02, -5.088136583587e+04, 7.096647132779e+04,
                    4.240113819656e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.007446123159e+02, 0, 1.208935347790e+02,
                    -5.792281546525e+04, 1.748503827229e+05, 4.826901288771e+04, 0, 0, 0, 0, 0, 0
                },
                {
                    -9.067015108427e+01, 1.208935347790e+02, 0, 5.653485092875e+04, 4.240113819656e+04,
                    6.201511993074e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.067015108427e+01, -1.208935347790e+02, 0,
                    6.435868385027e+04, 4.826901288771e+04, 1.646602577799e+05, 0, 0, 0, 0, 0, 0
                },
                {
                    -1.769691178449e+03, 1.327117266918e+03, -1.474574741020e+03, 0, 1.007446123159e+02,
                    9.067015108427e+01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.769691178449e+03,
                    -1.327117266918e+03, 1.474574741020e+03, 0, 1.007446123159e+02, 9.067015108427e+01
                },
                {
                    1.327117266918e+03, -9.955394394134e+02, 1.105931055765e+03, -1.007446123159e+02, 0,
                    1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.327117266918e+03,
                    9.955394394134e+02, -1.105931055765e+03, -1.007446123159e+02, 0, 1.208935347790e+02
                },
                {
                    -1.474574741020e+03, 1.105931055765e+03, -1.229013773408e+03, -9.067015108427e+01,
                    -1.208935347790e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.474574741020e+03,
                    -1.105931055765e+03, 1.229013773408e+03, -9.067015108427e+01, -1.208935347790e+02, 0
                },
                {
                    0, 1.007446123159e+02, 9.067015108427e+01, 4.128567459020e+04, 5.088136583587e+04,
                    -5.653485092875e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.007446123159e+02,
                    -9.067015108427e+01, 1.410620737015e+05, 5.792281546525e+04, -6.435868385027e+04
                },
                {
                    -1.007446123159e+02, 0, 1.208935347790e+02, 5.088136583587e+04, 7.096647132779e+04,
                    4.240113819656e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.007446123159e+02, 0,
                    -1.208935347790e+02, 5.792281546525e+04, 1.748503827229e+05, 4.826901288771e+04
                },
                {
                    -9.067015108427e+01, -1.208935347790e+02, 0, -5.653485092875e+04, 4.240113819656e+04,
                    6.201511993074e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.067015108427e+01,
                    1.208935347790e+02, 0, -6.435868385027e+04, 4.826901288771e+04, 1.646602577799e+05
                }
            });
            //Ku.PermuteColumns(gl.Glaucon.Perm);
            //Ku.PermuteRows(gl.Glaucon.Perm);
            //CheckMatrix(glaucon.LoadCases[0].Ku, Ku, 3, 1e-13, $"{param.InputFileName} Ku");
#endif
            //Assert.AreEqual(param.DynamicModesCount, 6, $"{file} Nr of dyn.modes nM");

            // test consistent mass matrix
            var sollCons = Matrix<double>.Build.DenseOfArray(new[,]
            {
                {
                    1.806317431251e-4, -6.450337283110e-6, -7.167041425678e-6, 0, 2.668644297994e-2, -2.401779868195e-2,
                    7.410044033696e-5, 6.450337283110e-6, 7.167041425678e-6, 0, -1.576892093041e-2, 1.419202883736e-2
                },
                {
                    -6.450337283110e-6, 1.843944398736e-4, -5.375281069259e-6, -2.668644297994e-2, 0, 3.202373157593e-2,
                    6.450337283110e-6, 7.033774358848e-5, 5.375281069259e-6, 1.576892093041e-2, 0, -1.892270511649e-2
                },
                {
                    -7.167041425678e-6, -5.375281069259e-6, 1.832596583145e-4, 2.401779868195e-2, -3.202373157593e-2, 0,
                    7.167041425678e-6, 5.375281069259e-6, 7.147252514754e-5, -1.419202883736e-2, 1.892270511649e-2, 0
                },
                {
                    0, -2.668644297994e-2, 2.401779868195e-2, 8.784802411316, -5.238945834494e+0, -5.821050927215e+0, 0,
                    -1.576892093041e-2, 1.419202883736e-2, -6.585730658852e+0, 3.931014604118, 4.367794004576
                },
                {
                    2.668644297994e-2, 0, -3.202373157593e-2, -5.238945834494, 1.184085414810e+1, -4.365788195411e+0,
                    1.576892093041e-2, 0, -1.892270511649e-2, 3.931014604118e+0, -8.878822511254, 3.275845503432
                },
                {
                    -2.401779868195e-2, 3.202373157593e-2, 0, -5.821050927215, -4.365788195411e+0, 1.091918775130e+1,
                    -1.419202883736e-2, 1.892270511649e-2, 0, 4.367794004576e+0, 3.275845503432, -8.187255127197
                },
                {
                    7.410044033696e-5, 6.450337283110e-6, 7.167041425678e-6, 0, 1.576892093041e-2, -1.419202883736e-2,
                    1.806317431251e-4, -6.450337283110e-6, -7.167041425678e-6, 0, -2.668644297994e-2, 2.401779868195e-2
                },
                {
                    6.450337283110e-6, 7.033774358848e-5, 5.375281069259e-6, -1.576892093041e-2, 0, 1.892270511649e-2,
                    -6.450337283110e-6, 1.843944398736e-4, -5.375281069259e-6, 2.668644297994e-2, 0, -3.202373157593e-2
                },
                {
                    7.167041425678e-6, 5.375281069259e-6, 7.147252514754e-5, 1.419202883736e-2, -1.892270511649e-2, 0,
                    -7.167041425678e-6, -5.375281069259e-6, 1.832596583145e-4, -2.401779868195e-2, 3.202373157593e-2, 0
                },
                {
                    0, 1.576892093041e-2, -1.419202883736e-2, -6.585730658852, 3.931014604118e+0, 4.367794004576e+0, 0,
                    2.668644297994e-2, -2.401779868195e-2, 8.784802411316e+0, -5.238945834494, -5.821050927215
                },
                {
                    -1.576892093041e-2, 0, 1.892270511649e-2, 3.931014604118, -8.878822511254e+0, 3.275845503432e+0,
                    -2.668644297994e-2, 0, 3.202373157593e-2, -5.238945834494e+0, 1.184085414810e+1, -4.365788195411
                },
                {
                    1.419202883736e-2, -1.892270511649e-2, 0, 4.367794004576, 3.275845503432e+0, -8.187255127197e+0,
                    2.401779868195e-2, -3.202373157593e-2, 0, -5.821050927215e+0, -4.365788195411, 1.091918775130e+1
                }
            });
            var mbr = glaucon.Members[0];

            Matrix<double> m = mbr.ConsistentMassMatrix();
            //CheckMatrix(m, sollCons, 5, $"{param.InputFileName} ConsistentMassMatrix");

            // Test lumped mass matrix:
            var sollLump = (dbl.DenseMatrix) Matrix<double>.Build.DenseOfArray(new[,]
            {
                {2.547321834621e-4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 2.547321834621e-4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 2.547321834621e-4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 5.074003876323e-3, 1.194498071589e-3, 1.327220079543e-3, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1.194498071589e-3, 4.377213334562e-3, 9.954150596575e-4, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1.327220079543e-3, 9.954150596575e-4, 4.587356513823e-3, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 2.547321834621e-4, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 2.547321834621e-4, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 2.547321834621e-4, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 5.074003876323e-3, 1.194498071589e-3, 1.327220079543e-3},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1.194498071589e-3, 4.377213334562e-3, 9.954150596575e-4},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1.327220079543e-3, 9.954150596575e-4, 4.587356513823e-3}
            });
            mbr = glaucon.Members[0];

            m = mbr.LumpedMassMatrix();
            CheckMatrix(m, sollLump, 6, $"{param.InputFileName} LumpedMassMatrix");

            //var mb = glaucon.Members[0];

            //var Q_ = Matrix<double>.Build.Dense(12, 3);
            //var soll2 = new dbl.DenseVector(12) {
            //      7.549350896813e+1,
            //     -7.976874190371e+1,
            //      6.983516554106e+2,
            //      4.330853281477e+3,
            //     -2.598929963733e+5,
            //     -3.037474009183e+4,
            //     -7.272224024199e+1,
            //     -2.023125809629e+1,
            //      2.058052476786e+2,
            //     -4.330853281477e+3,
            //      8.716568392654e+4,
            //      6.847963270740e+3};
            //var d2 = new dbl.DenseVector(12)
            //{
            // 0.0000000e+0  ,
            // 0.0000000e+0  ,
            // 0.0000000e+0  ,
            // 0.0000000e+0  ,
            // 0.0000000e+0  ,
            // 0.0000000e+0  ,
            // 2.4925667e-4  ,
            // -1.3373733e-2 ,
            // -2.1714220e-2 ,
            // 4.8695938e-2  ,
            // -1.7158685e-1 ,
            // -8.1500946e-2
            //};
            //var equivForces = new dbl.DenseVector(12){
            // 2.51622e+2,
            // 2.81392e+2,
            // -5.57698e+2,
            // -1.56439e+5,
            // 1.83896e+5,
            // 2.22209e+4,
            // 8.77621e+1,
            // 9.81456e+1,
            // -1.96144e+2,
            // 7.82404e+4,
            // -9.20019e+4,
            // -1.10867e+4
            //};

            //var Q = mb.MemberForces((dbl.DenseVector)deflection.Column(0), equivForces);

            // test gamma
            var sollg = new List<Matrix<double>>(4)
            {
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {6.656402354703e-01, 4.992301766027e-01, 5.547001962252e-01},
                    {-6.000000000000e-01, 8.000000000000e-01, 0.000000000000e+00},
                    {-4.437601569802e-01, -3.328201177351e-01, 8.320502943378e-01}
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {6.656402354703e-01, -4.992301766027e-01, -5.547001962252e-01},
                    {6.000000000000e-01, 8.000000000000e-01, 0.000000000000e+00},
                    {4.437601569802e-01, -3.328201177351e-01, 8.320502943378e-01}
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {6.656402354703e-01, 4.992301766027e-01, -5.547001962252e-01},
                    {-6.000000000000e-01, 8.000000000000e-01, 0.000000000000e+00},
                    {4.437601569802e-01, 3.328201177351e-01, 8.320502943378e-01}
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {6.656402354703e-01, -4.992301766027e-01, 5.547001962252e-01},
                    {6.000000000000e-01, 8.000000000000e-01, 0.000000000000e+00},
                    {-4.437601569802e-01, 3.328201177351e-01, 8.320502943378e-01}
                })
            };

            //var g = Matrix<double>.Build.Dense(12, 12);
            for (var i = 0; i < glaucon.Members.Count; i++)
            {
                CheckMatrix(glaucon.Members[i].Gamma.SubMatrix(0, 3, 0, 3), sollg[i], 7,
                    $"{param.InputFileName} Gamma for member {i + 1}");
            }

            var sollQ = new List<Matrix<double>>
            {
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {
                        1.135432950718e+02, 2.859390896001e-03, 2.082135235699e+00, -1.288730941714e+00,
                        -6.276892039473e+02, 6.039632888224e+00, -1.107720263457e+02, -2.859390896001e-03,
                        2.074767853517e+00, 1.288730941714e+00, 6.201322159553e+02, 4.572709674411e+00
                    },
                    {
                        1.858856498764e+02, -1.885306234463e-04, 2.073997625524e+00, 9.043266972907e-01,
                        -6.201138012669e+02, -2.773828119389e+00, -1.886569186025e+02, 1.885306234463e-04,
                        2.082905463692e+00, -9.043266972907e-01, 6.273248234593e+02, -3.503762568314e+00
                    },
                    {
                        -1.441034592633e+01, -6.646794623913e-03, 2.075185560021e+00, 1.284937412068e+00,
                        -6.226207776221e+02, -4.568116366200e+00, 1.163907720019e+01, 6.646794623913e-03,
                        2.081717529195e+00, -1.284937412068e+00, 6.281300643229e+02, -6.780790974242e+00
                    },
                    {
                        -8.675270073090e+01, 5.645401782572e-03, 2.083675370973e+00, -9.081202269370e-01,
                        -6.293664784637e+02, 4.618554629996e+00, 8.952396945705e+01, -5.645401782572e-03,
                        2.073227718243e+00, 9.081202269370e-01, 6.236158474630e+02, 2.764282259655e+00
                    }
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {
                        9.930404882708e+01, 5.146095917230e+00, -9.273242756284e+01, -1.077520403424e+03,
                        3.032285968950e+04, 4.713051714680e+02, -9.653278010093e+01, -5.146095917230e+00,
                        -8.338823580749e+01, 1.077520403424e+03, -2.190739107821e+04, 8.825806937040e+03
                    },
                    {
                        -2.103536836491e+02, -8.661525597475e+01, -6.231004012571e-01, -1.382829601098e+03,
                        2.975089881875e+03, -2.243949407953e+04, 2.075824149230e+02, -9.366231048479e+01,
                        4.780003490473e+00, 1.382829601098e+03, 1.909863308737e+03, 2.876799234368e+04
                    },
                    {
                        1.597040743046e+02, 5.130729279710e+00, -3.945649315047e+00, -4.722204432042e+02,
                        5.717859595008e+03, 5.561741582516e+03, -1.642753431023e+02, -5.130729279710e+00,
                        6.025525719015e-01, 4.722204432042e+02, 6.373954370620e+02, 3.693689795451e+03
                    },
                    {
                        -1.768947954891e+02, 6.777125882066e-01, -3.406492094952e+00, -1.669112455302e+02,
                        3.547052193301e+03, 2.658707544005e+03, 1.796660642152e+02, -7.227712685809e+00,
                        6.339535180630e-02, 1.669112455302e+02, 1.844332135703e+03, 9.373964024691e+03
                    }
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {
                        7.549350896813e+01, -7.976874190371e+01, 6.983516554106e+02, 4.330853281477e+03,
                        -2.598929963733e+05, -3.037474009183e+04, -7.272224024199e+01, -2.023125809629e+01,
                        2.058052476786e+02, -4.330853281477e+03, 8.716568392654e+04, 6.847963270740e+03
                    },
                    {
                        7.404751876334e+01, 1.186960993422e+02, -9.591343404449e+01, 7.182487416517e+03,
                        2.725307413591e+04, 5.168404220016e+04, -7.681878748948e+01, 8.130390065779e+01,
                        -9.992966286630e+01, -7.182487416517e+03, -5.114979887193e+04, -3.825752933553e+04
                    },
                    {
                        2.071718767732e+01, -1.853714368273e+01, 3.194381731791e+01, -3.536071375201e+02,
                        -3.607897906271e+04, -2.200520652845e+04, -2.348845640346e+01, 1.853714368273e+01,
                        -2.778691422870e+01, 3.536071375201e+02, -1.776107949062e+04, -1.141334427926e+04
                    },
                    {
                        2.216317788212e+01, -2.630643191173e+01, 2.148267783530e+01, -3.205241272560e+03,
                        -1.255499877964e+04, -1.617161067940e+04, -1.939190915597e+01, 2.630643191173e+01,
                        -1.732577474609e+01, 3.205241272560e+03, -2.242693782089e+04, -3.125276469543e+04
                    }
                })
            };
            for (var j = 0; j < glaucon.LoadCases.Count; j++)
            {
                var Q1 = glaucon.LoadCases[j].Q;
                for (var i = 0; i < glaucon.Members.Count; i++)
                {
                    CheckVector(Q1[i], sollQ[j].Row(i), 2,
                        $"{param.InputFileName} EndForces for Loadcase {j + 1}, member {i + 1} ");
                }
            }

            // test reaction forces:

            var sollReactions = Matrix<double>.Build.DenseOfArray(new[,]
            {
                {
                    7.4653330983e+01, 5.5993519745e+01, 6.4714921234e+01, 3.7307938424e+02, -5.0480217089e+02,
                    4.3034923725e+00,
                    -1.2465319573e+02, 9.3490166625e+01, 1.0638111191e+02, 3.7423385476e+02, 5.0347681927e+02,
                    -2.4183196504e+00,
                    8.6672189490e+00, 6.5087754132e+00, -4.7240842115e+00, -3.8074929996e+02, 4.9960725540e+02,
                    -4.9361645375e+00,
                    -5.8667354201e+01, 4.4007538217e+01, -4.6388045949e+01, -3.8026653607e+02, -5.0149793122e+02,
                    3.3345184244e+00
                },

                {
                    1.0443473703e+02, 8.3006445869e+01, -2.1004565767e+01, -1.9960924329e+04, 2.3894140910e+04,
                    5.0592241350e+02,
                    8.4098302143e+01, -1.8015472444e+02, -1.1116730587e+02, 1.4831233576e+04, -8.7375099559e+03,
                    2.3168124046e+04,
                    -1.0599397321e+02, -8.5921109034e+01, 9.1629820446e+01, 1.5706526960e+03, 1.9700451427e+03,
                    2.8065639771e+03,
                    -1.1583375718e+02, 8.7716419251e+01, -1.0095634180e+02, 8.3663503540e+02, 3.8077276950e+03,
                    2.1220707107e+03
                },

                {
                    -2.1178031931e+02, -2.5854058489e+02, 6.2292076835e+02, 1.7230712897e+05, -1.9565323671e+05,
                    -2.2873291399e+04,
                    -4.6703673989e+01, 1.3665575572e+02, -4.0547550332e+01, -5.2442875906e+04, -2.4593835247e+04,
                    -2.7848921887e+04,
                    -3.9106687688e+01, -6.1406879212e+00, -1.0110227383e+01, 5.8227277744e+03, -1.7816959306e+04,
                    -9.6854597527e+03,
                    -1.0545491693e+01, -2.4948565322e+01, 3.0156118382e+01, -2.4901851624e+03, -1.3837359761e+04,
                    -1.5243687609e+04
                }
            });

            //soll = soll.Transpose();
            foreach (var lc in glaucon.LoadCases)
            {
                CheckVector(lc.Reactions.Column(0), sollReactions.Transpose().Column(lc.Nr), 2,
                    $"{param.InputFileName} Reactions for loadcase {lc.Nr + 1}:");
            }

            // test displacements
            var soll5 = Matrix<double>.Build.DenseOfArray(new[,]
            {
                {
                    1.41272729441e-02, -5.02285483302e-02, -2.23737558835e-02, 3.74497547644e-05, 8.66599988108e-06,
                    7.77362632452e-08
                },
                {
                    6.41561960245e-02, 9.32371782765e-02, 8.73998303611e-02, -5.21361334826e-03, 2.07333596970e-02,
                    3.17569845621e-02
                },
                {
                    2.49256666341e-04, -1.33737327183e-02, -2.17142197290e-02, 4.86959380984e-02, -1.71586852323e-01,
                    -8.15009455729e-02
                }
            });

            foreach (var lc in glaucon.LoadCases)
            {
                CheckVector(lc.Displacements.Column(0).SubVector(0, 6), soll5.Transpose().Column(lc.Nr),
                    2, $"{param.InputFileName} Displacements loadcase {lc.Nr + 1}");
            }

            // Test frequencies:
            var sollv = (dbl.DenseVector) Vector<double>.Build.DenseOfArray(new[]
                {18.807943, 19.105451, 19.690439, 31.711570, 35.159165, 42.248953});
            //Assert.AreEqual( 3,gl.Glaucon.param.FrequenciesFound,  "Eigenfrequensies found: ");

            CheckVector(gl.Glaucon.eigenFreq, sollv, 3, $"{param.InputFileName} EigenFrequencies ");

            var sollPeakDispl = new[]
            {
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {
                        0.0000000000e+00, 0.0000000000e+00, 0.0000000000e+00, 2.9297512551e-05, double.NaN,
                        1.1023456536e-03
                    },
                    {
                        -2.8082652543e-02, -4.8659202431e-02, -6.5241107679e-01, 0.0000000000e+00, -3.5019526801e-05,
                        -1.1099381179e-03
                    },
                    {
                        4.6890015121e-02, 0.0000000000e+00, 4.3701020600e-03, 2.0558614608e-05, 2.2118663380e-05,
                        1.1065074702e-03
                    },
                    {
                        0.0000000000e+00, -3.1706474898e-02, -6.4928578243e-01, 0.0000000000e+00, double.NaN,
                        -1.1139045674e-03
                    },
                    {
                        0.0000000000e+00, double.NaN, 0.0000000000e+00, 2.9211271910e-05, 3.6695142896e-05,
                        1.1134247287e-03
                    },
                    {
                        -3.2611989854e-03, -4.8659202431e-02, -6.5589665474e-01, 0.0000000000e+00, double.NaN,
                        -1.0810352563e-03
                    },
                    {2.2068561564e-02, double.NaN, 0.0000000000e+00, 2.0644855249e-05, double.NaN, 1.0697273144e-03},
                    {
                        0.0000000000e+00, -3.1706474898e-02, -6.5898173933e-01, 0.0000000000e+00, -2.4424190449e-05,
                        -1.1166476891e-03
                    }
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {-9.6532780e+01, -5.1460959e+00, 9.2732428e+01, 1.0775204e+03, 3.0322860e+04, 8.8258069e+03},
                    {-9.9304049e+01, -5.1460959e+00, -8.3388236e+01, 1.0775204e+03, -1.3680542e+04, -4.7130517e+02},
                    {2.1035368e+02, 8.6615256e+01, 4.7800035e+00, 1.3828296e+03, 2.9750899e+03, 2.8767992e+04},
                    {2.0758241e+02, -9.3662310e+01, 6.2310040e-01, 1.3828296e+03, -1.9098633e+03, -1.5080916e+04},
                    {-1.5970407e+02, -5.1307293e+00, 1.2285317e+01, 4.7222044e+02, 5.7178596e+03, 3.6936898e+03},
                    {-1.6427534e+02, -5.1307293e+00, -1.8798492e+00, 4.7222044e+02, -1.0822815e+03, -5.5617416e+03},
                    {1.7966606e+02, -6.7771259e-01, 1.1746160e+01, 1.6691125e+02, 3.5470522e+03, 9.3739640e+03},
                    {1.7689480e+02, -7.2277127e+00, -2.4190064e+00, 1.6691125e+02, -2.8253671e+03, -2.6587075e+03}
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {-7.2722240e+01, 7.9768742e+01, 2.0580525e+02, -4.3308533e+03, 1.5464220e+05, 3.0374740e+04},
                    {-7.5493509e+01, -2.0231258e+01, -6.9835166e+02, -4.3308533e+03, -2.5989300e+05, -1.7081603e+04},
                    {-7.4047519e+01, 8.1303901e+01, 9.7711985e+01, -7.1824874e+03, 5.1149799e+04, 4.2272484e+04},
                    {-7.6818787e+01, -1.1869610e+02, -1.0219578e+02, -7.1824874e+03, -4.9215993e+04, -5.1684042e+04},
                    {-2.0717188e+01, 1.8537144e+01, -2.7786914e+01, 3.5360714e+02, 1.7761079e+04, 2.2005207e+04},
                    {-2.3488456e+01, 1.8537144e+01, -3.1943817e+01, 3.5360714e+02, -3.6078979e+04, -1.1413344e+04},
                    {-1.9391909e+01, 2.6306432e+01, -1.7325775e+01, 3.2052413e+03, 2.2426938e+04, 1.6171611e+04},
                    {-2.2163178e+01, 2.6306432e+01, -2.1482678e+01, 3.2052413e+03, -1.2554999e+04, -3.1252765e+04}
                })
            };

            for (var i = 0; i < glaucon.LoadCases.Count; i++)
            for (var j = 0; j < glaucon.Members.Count; j++)
            {
                CheckVector(glaucon.LoadCases[i].MinMaxDispl.Row(2 * j), sollPeakDispl[i].Row(j * 2), 3,
                    $"{param.InputFileName} Maximum Peak Displacements loadcase {i + 1}, member {j + 1}");
                CheckVector(glaucon.LoadCases[i].MinMaxDispl.Row(2 * j + 1), sollPeakDispl[i].Row(j * 2 + 1), 3,
                    $"{param.InputFileName} Minimum Peak Displacements loadcase {i + 1}, member {j + 1}");
            }

            // check the peak forces:
            var sollq = new[]
            {
                Matrix<double>.Build.DenseOfArray(new[,]
                {
                    {-1.1077203e+02, -2.8593909e-03, 2.0747679e+00, 1.2887309e+00, 3.1282741e+02, 4.5727097e+00},
                    {-1.1354330e+02, -2.8593909e-03, -2.0821352e+00, 1.2887309e+00, -6.2768920e+02, -6.0396329e+00},
                    {-1.8588565e+02, 1.8853062e-04, 2.0829055e+00, -9.0432670e-01, 3.1303010e+02, 2.7738281e+00},
                    {-1.8865692e+02, 1.8853062e-04, -2.0739976e+00, -9.0432670e-01, -6.2732482e+02, -3.5037626e+00},
                    {1.4410346e+01, 6.6467946e-03, 2.0817175e+00, -1.2849374e+00, 3.1137234e+02, 4.5681164e+00},
                    {1.1639077e+01, 6.6467946e-03, -2.0751856e+00, -1.2849374e+00, -6.2813006e+02, -6.7807910e+00},
                    {8.9523969e+01, -5.6454018e-03, 2.0732277e+00, 9.0812023e-01, 3.1024482e+02, 2.7642823e+00},
                    {8.6752701e+01, -5.6454018e-03, -2.0836754e+00, 9.0812023e-01, -6.2936648e+02, -4.6185546e+00}
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
/*    1   max*/ {-1.0095524e+02, -6.1152876e+00, 8.3114850e+01, 1.1181917e+03, 3.0419288e+04, 3.1550467e+03},
/*    1   min*/ {-1.0372651e+02, -6.1152876e+00, -9.3005813e+01, 1.1181917e+03, -1.3843910e+04, -7.8887247e+03},
/*    2   max*/ {2.0822047e+02, 8.6129666e+01, 4.5480232e+00, 1.5370587e+03, 2.6645350e+03, 2.9004051e+04},
/*    2   min*/ {2.0544920e+02, -9.4147900e+01, 3.9112015e-01, 1.5370587e+03, -1.8020516e+03, -1.5302924e+04},
/*    3   max*/ {-1.5674785e+02, -5.5451728e+00, 1.2488720e+01, 6.2478183e+02, 5.9467172e+03, 3.9785945e+03},
/*    3   min*/ {-1.6131912e+02, -5.5451728e+00, -1.6764456e+00, 6.2478183e+02, -1.0163839e+03, -6.0237568e+03},
/*    4   max*/ {1.8033304e+02, -1.5119559e+00, 6.5549252e+00, 2.0591486e+02, 2.9125449e+03, 3.9834129e+03},
/*    4   min*/ {1.7756177e+02, -8.0619560e+00, -7.6102407e+00, 2.0591486e+02, -3.5194395e+03, -9.5530586e+03}
                }),
                Matrix<double>.Build.DenseOfArray(new[,]
                {
/*    1   max*/ {-1.5672144e+02, 6.8095968e+01, 3.0642545e+02, -4.3845406e+03, 1.9061118e+05, 2.0132271e+04},
/*    1   min*/ {-1.5949271e+02, -3.1904032e+01, -5.9773146e+02, -4.3845406e+03, -1.7179110e+05, -2.0224170e+04},
/*    2   max*/ {-2.8949114e+02, 5.3734363e+01, 8.2969465e+01, -1.4725173e+04, 6.6709199e+04, 3.7846367e+04},
/*    2   min*/ {-2.9226241e+02, -1.4626564e+02, -1.1693830e+02, -1.4725173e+04, -4.8430216e+04, -7.8167221e+04},
/*    3   max*/ {-2.5638658e+02, 1.2156174e+01, -6.5223186e+01, 3.1660653e+03, 5.3183730e+04, 1.2196949e+04},
/*    3   min*/ {-2.5915785e+02, 1.2156174e+01, -6.9380089e+01, 3.1660653e+03, -6.8128035e+04, -9.7234796e+03},
/*    4   max*/ {-1.2361689e+02, 3.9696875e+01, 3.9286542e+01, 1.3506697e+04, 4.0794679e+04, 4.4186270e+04},
/*    4   min*/ {-1.2638816e+02, 3.9696875e+01, 3.5129639e+01, 1.3506697e+04, -2.6294654e+04, -2.7379332e+04}
                })
            };
            for (var i = 0; i < glaucon.LoadCases.Count; i++)
            for (var j = 0; j < glaucon.Members.Count; j++)
            {
                CheckVector(glaucon.LoadCases[i].MinMaxForce.Row(2 * j), sollq[i].Row(j * 2), 4,
                    $"{param.InputFileName} Maximum Peak forces loadcase {i + 1}, member {j + 1}");
                CheckVector(glaucon.LoadCases[i].MinMaxForce.Row(2 * j + 1), sollq[i].Row(j * 2 + 1), 4,
                    $"{param.InputFileName} Minimum Peak forces loadcase {i + 1}, member {j + 1}");
            }

            Debug.WriteLine("Exit " + MethodBase.GetCurrentMethod().Name);
        }
    }
}
