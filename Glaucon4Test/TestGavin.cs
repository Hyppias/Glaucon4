#region FileHeader
// Project: Glaucon4Test
// Filename:   TestGavin.cs
// Last write: 4/22/2023 4:14:35 PM
// Creation:   4/24/2023 12:39:30 PM
// Copyright: E.H. Terwiel, 2021,2022, 2023, the Netherlands
// No part of this file may be copied in any form without written consent
// of the programmer, owner and/or copyrightholder.
#endregion FileHeader

using System;
using System.Diagnostics;
using System.Reflection;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Terwiel.Glaucon;
using dbl = MathNet.Numerics.LinearAlgebra.Double;

namespace UnitTestGlaucon
{
    public partial class UnitTestGlaucon2
    {
        /*
         * B = [
814.284826068816    92.6480629862258    463.184475757141    57.9743661809322    45.0157845078619    26.7787890007721    160.091778164228    411.426308314090 ;
92.6480629862258    243.524968724989    114.308341183502    146.597633452842    179.557787312600    234.246200056854    194.836651624474    141.172541507933 ;
463.184475757141    114.308341183502    929.263623187228    92.0356805092224    29.9567947994658    1.16357887430729    265.770191624961    260.242701984540 ;
57.9743661809322    146.597633452842    92.0356805092224    349.983765984809    162.351695499901    194.567509065763    318.711874583451    50.7318261799080 ;
45.0157845078619    179.557787312600    29.9567947994658    162.351695499901    196.595250431208    160.677931342595    35.7502620693703    167.701866214149 ;
26.7787890007721    234.246200056854    1.16357887430729    194.567509065763    160.677931342595    251.083857976031    66.2366540256701    156.188002287058 ;
160.091778164228    194.836651624474    265.770191624961    318.711874583451    35.7502620693703    66.2366540256701    616.044676146639    166.101848372175 ;
411.426308314090    141.172541507933    260.242701984540    50.7318261799080    167.701866214149    156.188002287058    166.101848372175    473.288848902729 ];
         
            A=[
814.723686393179e+003    343.618906959194e+003    86.1904164218685e+003    225.615715154339e+003    277.444052557970e+003    69.1917328942340e+003    267.286983015139e+003    487.218524211439e+003   ;
343.618906959194e+003    905.791937075619e+003    96.2230067599681e+003    41.8216733572680e+003    241.282018318265e+003    73.6124446082201e+003    94.7968186042841e+003    524.618751976668e+003   ;
86.1904164218685e+003    96.2230067599681e+003    126.986816293506e+003    12.3344556600576e+003    97.2105397462722e+003    26.9235978004345e+003    74.3212883761824e+003    69.4891579764670e+003   ;
225.615715154339e+003    41.8216733572680e+003    12.3344556600576e+003    913.375856139019e+003    502.852010081553e+003    66.2984743794902e+003    62.3312265094613e+003    75.8111458930925e+003   ;
277.444052557970e+003    241.282018318265e+003    97.2105397462722e+003    502.852010081553e+003    632.359246225410e+003    63.8985246219132e+003    209.226537910110e+003    81.6461325683347e+003   ;
69.1917328942340e+003    73.6124446082201e+003    26.9235978004345e+003    66.2984743794902e+003    63.8985246219132e+003    97.5404049994095e+003    24.8820808752682e+003    25.1174593979201e+003   ;
267.286983015139e+003    94.7968186042841e+003    74.3212883761824e+003    62.3312265094613e+003    209.226537910110e+003    24.8820808752682e+003    278.498218867048e+003    234.138258362242e+003   ;
487.218524211439e+003    524.618751976668e+003    69.4891579764670e+003    75.8111458930925e+003    81.6461325683347e+003    25.1174593979201e+003    234.138258362242e+003    546.881519204984e+003    ];
           
             
             */

        private readonly dbl.DenseMatrix K = (dbl.DenseMatrix) dbl.DenseMatrix.Build.DenseOfArray(new[,]
        {
            {
                7.078693386629e+03, -2.273736754432e-13, 7.107218125384e-04, 0, -3.923097193768e+02,
                -5.322383324064e+00, -1.769663194356e+03, -1.327133964609e+03, -1.474593294010e+03, 0,
                -9.655890384754e+01, 8.690301346279e+01, -1.769663730359e+03, 1.327133644785e+03, 1.474592938650e+03, 0,
                -9.663907621635e+01, 8.697516859472e+01, -1.769683498958e+03, -1.327121849156e+03, 1.474579832396e+03,
                0, -9.959595584083e+01, -8.963636025675e+01, -1.769682962956e+03, 1.327122168981e+03,
                -1.474580187756e+03, 0, -9.951578347202e+01, -8.956420512482e+01
            },
            {
                -3.212085381078e-17, 3.982061603902e+03, 1.965938088028e-02, 3.923097193768e+02, 0, 1.924136851431e-01,
                -1.327133964609e+03, -9.955017150005e+02, -1.105944970508e+03, 9.655890384754e+01, 0,
                -1.158706846171e+02, 1.327133644785e+03, -9.955024375677e+02, -1.105944703987e+03, 9.663907621635e+01,
                0, 1.159668914596e+02, -1.327121849156e+03, -9.955290869506e+02, 1.105934874297e+03, 9.959595584083e+01,
                0, 1.195151470090e+02, 1.327122168981e+03, -9.955283643835e+02, 1.105935140817e+03, 9.951578347202e+01,
                0, -1.194189401664e+02
            },
            {
                1.004029661577e-07, 4.936985620971e-06, 4.915966427264e+03, 5.322383324064e+00, -1.924136851431e-01, 0,
                -1.474593294010e+03, -1.105944970508e+03, -1.228978986552e+03, -8.690301346279e+01, 1.158706846171e+02,
                0, 1.474592938650e+03, -1.105944703987e+03, -1.228979652854e+03, -8.697516859472e+01,
                -1.159668914596e+02, 0, 1.474579832396e+03, 1.105934874297e+03, -1.229004227080e+03, 8.963636025675e+01,
                -1.195151470090e+02, 0, -1.474580187756e+03, 1.105935140817e+03, -1.229003560778e+03,
                8.956420512482e+01, 1.194189401664e+02, 0
            },
            {
                0, 9.851924917292e-02, 1.082278851055e-03, 5.384924060699e+05, 7.275957614183e-12, 2.566085994449e+02,
                0, -9.655890384754e+01, 8.690301346279e+01, 4.381446034905e+04, -5.238956049423e+04,
                -5.821062277137e+04, 0, -9.663907621635e+01, 8.697516859472e+01, 4.376602440421e+04, 5.236067278280e+04,
                5.817852531422e+04, 0, -9.959595584083e+01, -8.963636025675e+01, 4.197963265198e+04,
                -5.129524978719e+04, 5.699472198576e+04, 0, -9.951578347202e+01, -8.956420512482e+01,
                4.202806859682e+04, 5.132413749862e+04, -5.702681944291e+04
            },
            {
                -5.542120529162e-02, -3.164522400231e-18, -3.913254879458e-05, 3.866676373179e-10, 6.646819172822e+05,
                7.098088316749e+03, 9.655890384754e+01, 0, -1.158706846171e+02, -5.238956049423e+04, 7.437503730402e+04,
                -4.365796707853e+04, 9.663907621635e+01, 0, 1.159668914596e+02, 5.236067278280e+04, 7.430975019418e+04,
                -4.363389398567e+04, 9.959595584083e+01, 0, 1.195151470090e+02, -5.129524978719e+04, 7.190186169451e+04,
                4.274604148932e+04, 9.951578347202e+01, 0, -1.194189401664e+02, 5.132413749862e+04, 7.196714880435e+04,
                4.277011458219e+04
            },
            {
                -7.518878179013e-04, 4.832011763820e-05, -8.453282385509e-11, 4.765305151522e-04, 1.067883049226e-02,
                6.266247631071e+05, -8.690301346279e+01, 1.158706846171e+02, 0, -5.821062277137e+04,
                -4.365796707853e+04, 6.515835536522e+04, -8.697516859472e+01, -1.159668914596e+02, 0,
                5.817852531422e+04, -4.363389398567e+04, 6.509815035276e+04, 8.963636025675e+01, -1.195151470090e+02, 0,
                5.699472198576e+04, 4.274604148932e+04, 6.287769738009e+04, 8.956420512482e+01, 1.194189401664e+02, 0,
                -5.702681944291e+04, 4.277011458219e+04, 6.293790239256e+04
            },
            {
                -1.769663194356e+03, -1.327133964609e+03, -1.474593294010e+03, 0, 9.655890384754e+01,
                -8.690301346279e+01, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                -1.327133964609e+03, -9.955017150005e+02, -1.105944970508e+03, -9.655890384754e+01, 0,
                1.158706846171e+02, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                -1.474593294010e+03, -1.105944970508e+03, -1.228978986552e+03, 8.690301346279e+01, -1.158706846171e+02,
                0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                0, 9.655890384754e+01, -8.690301346279e+01, 4.381446034905e+04, -5.238956049423e+04,
                -5.821062277137e+04, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                -9.655890384754e+01, 0, 1.158706846171e+02, -5.238956049423e+04, 7.437503730402e+04,
                -4.365796707853e+04, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                8.690301346279e+01, -1.158706846171e+02, 0, -5.821062277137e+04, -4.365796707853e+04,
                6.515835536522e+04, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                -1.769663730359e+03, 1.327133644785e+03, 1.474592938650e+03, 0, 9.663907621635e+01, -8.697516859472e+01,
                0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                1.327133644785e+03, -9.955024375677e+02, -1.105944703987e+03, -9.663907621635e+01, 0,
                -1.159668914596e+02, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                1.474592938650e+03, -1.105944703987e+03, -1.228979652854e+03, 8.697516859472e+01, 1.159668914596e+02, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                0, 9.663907621635e+01, -8.697516859472e+01, 4.376602440421e+04, 5.236067278280e+04, 5.817852531422e+04,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -9.663907621635e+01, 0, -1.159668914596e+02, 5.236067278280e+04, 7.430975019418e+04,
                -4.363389398567e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                8.697516859472e+01, 1.159668914596e+02, 0, 5.817852531422e+04, -4.363389398567e+04, 6.509815035276e+04,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -1.769683498958e+03, -1.327121849156e+03, 1.474579832396e+03, 0, 9.959595584083e+01, 8.963636025675e+01,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -1.327121849156e+03, -9.955290869506e+02, 1.105934874297e+03, -9.959595584083e+01, 0,
                -1.195151470090e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                1.474579832396e+03, 1.105934874297e+03, -1.229004227080e+03, -8.963636025675e+01, 1.195151470090e+02, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                0, 9.959595584083e+01, 8.963636025675e+01, 4.197963265198e+04, -5.129524978719e+04, 5.699472198576e+04,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -9.959595584083e+01, 0, -1.195151470090e+02, -5.129524978719e+04, 7.190186169451e+04,
                4.274604148932e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                -8.963636025675e+01, 1.195151470090e+02, 0, 5.699472198576e+04, 4.274604148932e+04, 6.287769738009e+04,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0, 0
            },
            {
                -1.769682962956e+03, 1.327122168981e+03, -1.474580187756e+03, 0, 9.951578347202e+01, 8.956420512482e+01,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0, 0
            },
            {
                1.327122168981e+03, -9.955283643835e+02, 1.105935140817e+03, -9.951578347202e+01, 0, 1.194189401664e+02,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0, 0
            },
            {
                -1.474580187756e+03, 1.105935140817e+03, -1.229003560778e+03, -8.956420512482e+01, -1.194189401664e+02,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0, 0
            },
            {
                0, 9.951578347202e+01, 8.956420512482e+01, 4.202806859682e+04, 5.132413749862e+04, -5.702681944291e+04,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0, 0
            },
            {
                -9.951578347202e+01, 0, 1.194189401664e+02, 5.132413749862e+04, 7.196714880435e+04, 4.277011458219e+04,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.845775807877e+10, 0
            },
            {
                -8.956420512482e+01, -1.194189401664e+02, 0, -5.702681944291e+04, 4.277011458219e+04,
                6.293790239256e+04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1.845775807877e+10
            }
        });

        private dbl.DenseMatrix M = (dbl.DenseMatrix) dbl.DenseMatrix.Build.DenseOfArray(new[,]
        {
            {
                1.007225284626e-01, 0, 0, 0, -1.067457719198e-01, 0, 7.410044033696e-05, 6.450337283110e-06,
                7.167041425678e-06, 0, 1.576892093041e-02, -1.419202883736e-02, 7.410044033696e-05, -6.450337283110e-06,
                -7.167041425678e-06, 0, 1.576892093041e-02, -1.419202883736e-02, 7.410044033696e-05, 6.450337283110e-06,
                -7.167041425678e-06, 0, 1.576892093041e-02, 1.419202883736e-02, 7.410044033696e-05, -6.450337283110e-06,
                7.167041425678e-06, 0, 1.576892093041e-02, 1.419202883736e-02
            },
            {
                0, 1.007375792496e-01, 0, 1.067457719198e-01, 0, 0, 6.450337283110e-06, 7.033774358848e-05,
                5.375281069259e-06, -1.576892093041e-02, 0, 1.892270511649e-02, -6.450337283110e-06, 7.033774358848e-05,
                5.375281069259e-06, -1.576892093041e-02, 0, -1.892270511649e-02, 6.450337283110e-06, 7.033774358848e-05,
                -5.375281069259e-06, -1.576892093041e-02, 0, -1.892270511649e-02, -6.450337283110e-06,
                7.033774358848e-05, -5.375281069259e-06, -1.576892093041e-02, 0, 1.892270511649e-02
            },
            {
                0, 0, 1.007330401234e-01, 0, 0, 0, 7.167041425678e-06, 5.375281069259e-06, 7.147252514754e-05,
                1.419202883736e-02, -1.892270511649e-02, 0, -7.167041425678e-06, 5.375281069259e-06, 7.147252514754e-05,
                1.419202883736e-02, 1.892270511649e-02, 0, -7.167041425678e-06, -5.375281069259e-06, 7.147252514754e-05,
                -1.419202883736e-02, 1.892270511649e-02, 0, 7.167041425678e-06, -5.375281069259e-06, 7.147252514754e-05,
                -1.419202883736e-02, -1.892270511649e-02, 0
            },
            {
                0, 1.067457719198e-01, 0, 3.513920964526e+01, 0, 0, 0, 1.576892093041e-02, -1.419202883736e-02,
                -6.585730658852e+00, 3.931014604118e+00, 4.367794004576e+00, 0, 1.576892093041e-02, -1.419202883736e-02,
                -6.585730658852e+00, -3.931014604118e+00, -4.367794004576e+00, 0, 1.576892093041e-02,
                1.419202883736e-02, -6.585730658852e+00, 3.931014604118e+00, -4.367794004576e+00, 0, 1.576892093041e-02,
                1.419202883736e-02, -6.585730658852e+00, -3.931014604118e+00, 4.367794004576e+00
            },
            {
                -1.067457719198e-01, 0, 0, 0, 4.736341659242e+01, 0, -1.576892093041e-02, 0, 1.892270511649e-02,
                3.931014604118e+00, -8.878822511254e+00, 3.275845503432e+00, -1.576892093041e-02, 0,
                -1.892270511649e-02, -3.931014604118e+00, -8.878822511254e+00, 3.275845503432e+00, -1.576892093041e-02,
                0, -1.892270511649e-02, 3.931014604118e+00, -8.878822511254e+00, -3.275845503432e+00,
                -1.576892093041e-02, 0, 1.892270511649e-02, -3.931014604118e+00, -8.878822511254e+00,
                -3.275845503432e+00
            },
            {
                0, 0, 0, 0, 0, 4.367675100518e+01, 1.419202883736e-02, -1.892270511649e-02, 0, 4.367794004576e+00,
                3.275845503432e+00, -8.187255127197e+00, 1.419202883736e-02, 1.892270511649e-02, 0, -4.367794004576e+00,
                3.275845503432e+00, -8.187255127197e+00, -1.419202883736e-02, 1.892270511649e-02, 0,
                -4.367794004576e+00, -3.275845503432e+00, -8.187255127197e+00, -1.419202883736e-02, -1.892270511649e-02,
                0, 4.367794004576e+00, -3.275845503432e+00, -8.187255127197e+00
            },
            {
                7.410044033696e-05, 6.450337283110e-06, 7.167041425678e-06, 0, -1.576892093041e-02, 1.419202883736e-02,
                1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                6.450337283110e-06, 7.033774358848e-05, 5.375281069259e-06, 1.576892093041e-02, 0, -1.892270511649e-02,
                0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                7.167041425678e-06, 5.375281069259e-06, 7.147252514754e-05, -1.419202883736e-02, 1.892270511649e-02, 0,
                0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                0, -1.576892093041e-02, 1.419202883736e-02, -6.585730658852e+00, 3.931014604118e+00, 4.367794004576e+00,
                0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                1.576892093041e-02, 0, -1.892270511649e-02, 3.931014604118e+00, -8.878822511254e+00, 3.275845503432e+00,
                0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -1.419202883736e-02, 1.892270511649e-02, 0, 4.367794004576e+00, 3.275845503432e+00, -8.187255127197e+00,
                0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                7.410044033696e-05, -6.450337283110e-06, -7.167041425678e-06, 0, -1.576892093041e-02,
                1.419202883736e-02, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                -6.450337283110e-06, 7.033774358848e-05, 5.375281069259e-06, 1.576892093041e-02, 0, 1.892270511649e-02,
                0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -7.167041425678e-06, 5.375281069259e-06, 7.147252514754e-05, -1.419202883736e-02, -1.892270511649e-02,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                0, -1.576892093041e-02, 1.419202883736e-02, -6.585730658852e+00, -3.931014604118e+00,
                -4.367794004576e+00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                1.576892093041e-02, 0, 1.892270511649e-02, -3.931014604118e+00, -8.878822511254e+00, 3.275845503432e+00,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -1.419202883736e-02, -1.892270511649e-02, 0, -4.367794004576e+00, 3.275845503432e+00,
                -8.187255127197e+00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                7.410044033696e-05, 6.450337283110e-06, -7.167041425678e-06, 0, -1.576892093041e-02,
                -1.419202883736e-02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                6.450337283110e-06, 7.033774358848e-05, -5.375281069259e-06, 1.576892093041e-02, 0, 1.892270511649e-02,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                -7.167041425678e-06, -5.375281069259e-06, 7.147252514754e-05, 1.419202883736e-02, -1.892270511649e-02,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0, 0, 0
            },
            {
                0, -1.576892093041e-02, -1.419202883736e-02, -6.585730658852e+00, 3.931014604118e+00,
                -4.367794004576e+00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0,
                0, 0
            },
            {
                1.576892093041e-02, 0, 1.892270511649e-02, 3.931014604118e+00, -8.878822511254e+00, -3.275845503432e+00,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0, 0, 0, 0
            },
            {
                1.419202883736e-02, -1.892270511649e-02, 0, -4.367794004576e+00, -3.275845503432e+00,
                -8.187255127197e+00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0, 0,
                0, 0
            },
            {
                7.410044033696e-05, -6.450337283110e-06, 7.167041425678e-06, 0, -1.576892093041e-02,
                -1.419202883736e-02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0,
                0, 0
            },
            {
                -6.450337283110e-06, 7.033774358848e-05, -5.375281069259e-06, 1.576892093041e-02, 0,
                -1.892270511649e-02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0,
                0, 0
            },
            {
                7.167041425678e-06, -5.375281069259e-06, 7.147252514754e-05, 1.419202883736e-02, 1.892270511649e-02, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02, 0, 0, 0
            },
            {
                0, -1.576892093041e-02, -1.419202883736e-02, -6.585730658852e+00, -3.931014604118e+00,
                4.367794004576e+00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02,
                0, 0
            },
            {
                1.576892093041e-02, 0, -1.892270511649e-02, -3.931014604118e+00, -8.878822511254e+00,
                -3.275845503432e+00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1.264815703907e+02, 0
            },
            {
                1.419202883736e-02, 1.892270511649e-02, 0, 4.367794004576e+00, -3.275845503432e+00, -8.187255127197e+00,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.264815703907e+02
            }
        });

        [TestMethod]
        public void TestGavin()
        {
            Debug.WriteLine("Enter " + MethodBase.GetCurrentMethod().Name);
            var m = (dbl.DenseMatrix) dbl.DenseMatrix.Build.DenseOfArray(new[,]
            {
                {
                    814.723686393179e+003, 343.618906959194e+003, 86.1904164218685e+003, 225.615715154339e+003,
                    277.444052557970e+003, 69.1917328942340e+003, 267.286983015139e+003, 487.218524211439e+003
                },
                {
                    343.618906959194e+003, 905.791937075619e+003, 96.2230067599681e+003, 41.8216733572680e+003,
                    241.282018318265e+003, 73.6124446082201e+003, 94.7968186042841e+003, 524.618751976668e+003
                },
                {
                    86.1904164218685e+003, 96.2230067599681e+003, 126.986816293506e+003, 12.3344556600576e+003,
                    97.2105397462722e+003, 26.9235978004345e+003, 74.3212883761824e+003, 69.4891579764670e+003
                },
                {
                    225.615715154339e+003, 41.8216733572680e+003, 12.3344556600576e+003, 913.375856139019e+003,
                    502.852010081553e+003, 66.2984743794902e+003, 62.3312265094613e+003, 75.8111458930925e+003
                },
                {
                    277.444052557970e+003, 241.282018318265e+003, 97.2105397462722e+003, 502.852010081553e+003,
                    632.359246225410e+003, 63.8985246219132e+003, 209.226537910110e+003, 81.6461325683347e+003
                },
                {
                    69.1917328942340e+003, 73.6124446082201e+003, 26.9235978004345e+003, 66.2984743794902e+003,
                    63.8985246219132e+003, 97.5404049994095e+003, 24.8820808752682e+003, 25.1174593979201e+003
                },
                {
                    267.286983015139e+003, 94.7968186042841e+003, 74.3212883761824e+003, 62.3312265094613e+003,
                    209.226537910110e+003, 24.8820808752682e+003, 278.498218867048e+003, 234.138258362242e+003
                },
                {
                    487.218524211439e+003, 524.618751976668e+003, 69.4891579764670e+003, 75.8111458930925e+003,
                    81.6461325683347e+003, 25.1174593979201e+003, 234.138258362242e+003, 546.881519204984e+003
                }
            });
            var ub = m.RowCount;
            double[] b = {51d, 68, -30, -85, -68, -10, -79, -14};

            var d = new double[ub];
            var x = new double[ub];
            var soll = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(new[]
            {
                220.965626894336e-006,
                -86.3569056532970e-006,
                -187.643314225229e-006,
                -263.402086848235e-006,
                285.557777834191e-006,
                -13.0303818356070e-006,
                -732.280560922672e-006,
                192.219683329234e-006
            });
            var tol = 10;
            var pd = 0;

            var glaucon = new Glaucon();
            glaucon.ldl_dcmp(m, ub, d, b, x, true, true, ref pd);
            var _x = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(x);
            Assert.AreEqual(-pd, 1, "there may be only one negative element on vector d");
            CheckVector(_x, soll, tol, "ldl decomp");
            for (var i = 0; i < ub; i++)
            {
                x[i] = 0;
            }

            glaucon.ldl_dcmp(m, ub, d, b, x, false, true, ref pd);
            _x = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(x);
            Assert.AreEqual(pd, 0, "there may be no negative elements on vector d");
            CheckVector(_x, soll, tol, "ldl decomp");
            for (var i = 0; i < ub; i++)
            {
                x[i] = 0;
            }

            glaucon.ldl_dcmp(m, ub, d, b, x, true, false, ref pd);
            _x = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(x);
            Assert.AreEqual(-pd, 1, "there may be only one negative element on vector d");
            CheckVector(_x, (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(new[] {0d, 0, 0, 0, 0, 0, 0, 0}), tol,
                "ldl decomp");
        }

        [TestMethod]
        public void TestLUDecomp()
        {
            Debug.WriteLine("Enter " + MethodBase.GetCurrentMethod().Name);
            var Asoll = (dbl.DenseMatrix) dbl.DenseMatrix.Build.DenseOfArray(new[,]
            {
                {1, 0, 0, 0},
                {1, 1.205872292270e+02, 1.454127985264e+04, 1.753492646845e+06},
                {0, 8.292752113224e-03, -1.205872292270e+02, -1.454127985264e+04},
                {0, 8.292752113224e-03, -1, 1.454127985264e+04}
            });
            var Ain = (dbl.DenseMatrix) dbl.DenseMatrix.Build.DenseOfArray(new[,]
            {
                {1, 0, 0, 0},
                {1, 1.205872292270e+02, 1.454127985264e+04, 1.753492646845e+06},
                {0, 1, 0, 0},
                {0, 1, 2.411744584540e+02, 4.362383955793e+04}
            });
            var aIn = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(new[]
            {
                -2.998618701956e+01,
                -1.525431655339e+01,
                1.062562218145e-01,
                1.177004127662e-01
            });
            var aSollMatlab = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(new[]
            {
                -29.9861870195600,
                106.256221814500e-003,
                300.947236765377e-006,
                -1.40144921946248e-006
            });
            Glaucon.lu_dcmp(Ain, aIn, true, true);
            CheckMatrix(Ain, Asoll, 12, "lu_decomp A");
            CheckVector(aIn, aSollMatlab, 14, "lu_dcmp B");
        }

        [TestMethod]
        public void TestGavinGauss()
        {
            // test matrices generated by MatLab
            // matrix equation solved also by Matlab and found to be correct.
            double[,] m =
            {
                {0.4965, 0.1754, 0.1471, 0.3852, 0.1880, 0.1496, 0.4585, 0.1302, 0.1303, 0.2715},
                {0.1754, 9.0272, 6.7225, 2.3895, 3.9707, 1.5904, 3.8721, 2.2260, 0.8908, 4.0662},
                {0.1471, 6.7225, 9.4479, 2.1395, 2.6069, 0.7784, 1.6634, 2.6261, 0.0325, 1.8070},
                {0.3852, 2.3895, 2.1395, 4.9086, 1.7159, 2.8514, 4.4417, 0.8188, 1.0329, 2.3998},
                {0.1880, 3.9707, 2.6069, 1.7159, 4.8925, 0.6578, 4.7934, 0.4336, 0.8121, 3.0532},
                {0.1496, 1.5904, 0.7784, 2.8514, 0.6578, 3.3772, 1.4821, 1.0019, 0.5433, 2.2936},
                {0.4585, 3.8721, 1.6634, 4.4417, 4.7934, 1.4821, 9.0005, 1.1771, 0.6433, 3.0860},
                {0.1302, 2.2260, 2.6261, 0.8188, 0.4336, 1.0019, 1.1771, 3.6925, 0.2639, 1.3567},
                {0.1303, 0.8908, 0.0325, 1.0329, 0.8121, 0.5433, 0.6433, 0.2639, 1.1120, 1.0987},
                {0.2715, 4.0662, 1.8070, 2.3998, 3.0532, 2.2936, 3.0860, 1.3567, 1.0987, 7.8025}
            };
            double[,] b = {{51d}, {68}, {-30}, {-85}, {-68}, {-10}, {-79}, {-14}, {71}, {-17}};
            var ub = 10;
            var d = new double[ub];
            var x = new double[ub];
            double[,] soll =
            {
                {157.5767}, {243.7632}, {-403.2470}, {747.4051}, {456.9276},
                {
                    -449.0875
                },
                {-556.8444}, {276.5569}, {-634.2902}, {-56.5049}
            };

            var glaucon = new Glaucon();

            glaucon.Gaussj(m, ub, b, 1);
            CheckMatrix((dbl.DenseMatrix) dbl.DenseMatrix.Build.DenseOfArray(b),
                (dbl.DenseMatrix) dbl.DenseMatrix.Build.DenseOfArray(soll), 6, "Gauss");
        }

        //[TestMethod]
        public void TestGavinSubspace()
        {
            var OmegaSoll = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(new[]
            {
                13965.044270899896, 14410.342843354207, 15306.311778318714, 39700.431023579571,
                48801.912580020027, 70467.9494750457, 145932391.74502838, 145932391.88928232,
                145932407.01881152, 145932407.01881152
            });

            var glaucon = new Glaucon
            {
                nM = 2
            };
            Glaucon.DoF = K.RowCount;
            param.ModalMethod = ModalMethod.SUBSPACE;

            var ub = K.RowCount;
            var omega = new dbl.DenseVector(ub);
            var v = new dbl.DenseMatrix(ub);
            var ok = 0;
            var tol = 1e-6;
            glaucon.Subspace(omega, v, ref ok, tol);

            CheckVector(omega, OmegaSoll, 6, "Subspace omega");
        }

        //[TestMethod]
        public void TestGavinStodola()
        {
            var OmegaSoll = (dbl.DenseVector) dbl.DenseVector.Build.DenseOfArray(new[]
            {
                13965.065502773705, 14410.332240877848, 15306.301208561314, 48801.912535730138
            });

            var glaucon = new Glaucon {nM = 2};

            param.ModalMethod = ModalMethod.STODOLA;
            var modesBathe = Math.Min(2 * glaucon.nM, glaucon.nM + 8);
            var ub = K.RowCount;
            var omega = new dbl.DenseVector(modesBathe);
            var v = new dbl.DenseMatrix(ub);
            var ok = 0;
            var tol = 1e-8;

            glaucon.Stodola(omega, v, ref ok, tol);
            CheckVector(omega, OmegaSoll, 5, "Stodola EigenValues");
        }
    }
}
