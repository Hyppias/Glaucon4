
using Terwiel.Glaucon;
using static Terwiel.Glaucon.Glaucon;
using static Terwiel.Glaucon.Glaucon.LoadCase;

namespace UnitTestGlaucon
{
    public class TestCobject
    {
        public Parameters Param = new Parameters()
        {

            StrainLimit = 12.0,
            EquilibriumTolerance = 12.0,
            EquilibriumError = 12.0,
            MinEigenvalue = 12.0,
            MaxEigenvalue = 12.0,
            ModalConvergenceTol = 1e-6,
            ResidualTolerance = 1e-6,
            MaxVibrationTime = 12.0,
            Analyze = true,
            Validate = true,
            ModalExaggeration = 20.0,
            XIncrement = -1,
            UnifLoadsLocal = true,
            // HTML = 1, Latex = 2, CSV = 3, Excel = 4, XML = 5
            OutputFormat = 2,
            RenumNodes = true,
            MaxSegmentCount = 20,
            MinimumIterations = 2,
            MaximumIterations = 13,
            AccountForShear = true,
            AccountForGeomStability = false,
            DeformationExaggeration = 20.0,
            Decimals = 2,
            ModalMethod = 1,
            Scale = 1.0,
            ConsistentMassMatrix = true,
            LumpedMassMatrix = true,
            DynamicModesCount = 14,
            PanRate = 2.0,
            Shift = 10.0,
            InputSource = 1
        };
        public Glaucon Glaucon = new()
        {

            Title = "Example C: a tetrahedral frame - static and dynamic analysis (in, kip) ",

            Nodes = new List<Node>
            {
                new(1   ,new[]{   0.0 ,   0.0,    0.0}  ,0.0),
                new(2   ,new[]{   0.0   ,100.0  ,  0.0  },0.0 ),
                new(3   ,new[]{   0.0   , 50.0  ,100.0  },0.0 ),
                new(4   ,new[]{  100.0,   0.0,    0.0}  ,0.0),
                new(5   ,new[]{  100.0, 100.0,    0.0}  ,0.0),
                new(6   ,new[]{  100.0,  50.0,  100.0}  ,0.0),
                new(7   ,new[]{  200.0,   0.0,    0.0}  ,0.0),
                new(8   ,new[]{  200.0, 100.0,    0.0}  ,0.0),
                new(9   ,new[]{  200.0,  50.0,  100.0}  ,0.0),
                new(10,new[]{   300.0   ,  0.0  ,  0.0  },0.0 ),
                new(11,new[]{   300.0   ,100.0  ,  0.0  },0.0 ),
                new(12,new[]{   300.0   , 50.0  ,100.0  },0.0 ),
                new(13,new[]{   400.0   ,  0.0  ,  0.0  },0.0 ),
                new(14,new[]{   400.0   ,100.0  ,  0.0  },0.0 ),
                new(15,new[]{   400.0   , 50.0  ,100.0  },0.0 ),
                new(16,new[]{   500.0   ,  0.0  ,  0.0  },0.0 ),
                new(17,new[]{   500.0   ,100.0  ,  0.0  },0.0 ),
                new(18,new[]{   500.0   , 50.0  ,100.0  },0.0 ),



            },

            NodesRestraints = new List<NodeRestraint>
            {
                new( 1  ,new[]{1 ,1 ,1  ,0  ,0,  0 }),
                new( 3  ,new[]{1 ,1 ,1  ,0  ,0,  0 }),
                new( 16,new[]{1, 1, 1,  0,  0,  0  }),
    new( 18,new[]{1, 1, 1,  0,  0,  0  }),


            },

            Members = new List<Member>
            {
                new( 1,   1,   2,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 2,   2,   3,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 3,   1,   3,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 4,   1,   4,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 5,   2,   5,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 6,   3,   6,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 7,   3,   4,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 8,   2,   4,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new( 9,   2,   6,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(10,   4,   5,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(11,   5,   6,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(12,   4,   6,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(13,   4,   7,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(14,   5,   8,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(15,   6,   9,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(16,   4,   9,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(17,   5,   9,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(18,   4,   8,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(19,   7,   8,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(20,   8,   9,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(21,   7,   9,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(22,   7,  10,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(23,   8,  11,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(24,   9,  12,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(25,   9,  10,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(26,   8,  10,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(27,   8,  12,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(28,  10,  11,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(29,  11,  12,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(30,  10,  12,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(31,  10,  13,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(32,  11,  14,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(33,  12,  15,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(34,  10,  15,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(35,  11,  15,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(36,  10,  14,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(37,  13,  14,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(38,  14,  15,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(39,  13,  15,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(40,  13,  16,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(41,  14,  17,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(42,  15,  18,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(43,  15,  16,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(44,  14,  16,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(45,  14,  18,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(46,  16,  17,new[]{   10.0,  8.0,  6.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(47,  17,  18,new[]{   10.0,  7.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0),
                new(48,  16,  18,new[]{   20.0,  8.0,  5.0},new[]{  50.0,  100.0,  200.0},new[]{  29000,   11500 ,  7.33e-7},0)


                },

            LoadCases = new List<LoadCase>
                {

                new LoadCase()
                {
                    // second load case
                    Nr = 1, // load case number
                    g = new double []{ 0, 0, -386.4 },// must be double
                   
                    
                    UniformLoads = new List<UniformLoad>
                    {
                        new(  5,new double[]{   0.0,    -1.1,   0.0}),
                        new( 14,new double[]{   0.0,    -1.1,   0.0}),
                        new( 23,new double[]{   0.0,    -1.1,   0.0}),
                        new( 32,new double[]{   0.0,    -1.1,   0.0}),
                        new( 41,new double[]{   0.0,    -1.1,   0.0}),

                    }

                }, // end LoadCase


        }, // End LoadCases
            AnimatedModes = new[] { 1, 2, 3, 4, 5 }


        };
    };
}


